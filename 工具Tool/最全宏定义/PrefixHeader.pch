//
//  PrefixHeader.pch
//  JNdefine
//
//  Created by Titan on 16/3/15.
//  Copyright © 2016年 Aaron Wong. All rights reserved.
//

#import <UIKit/UIKit.h>

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

//----------------------INSTALLATION 安装方法----------------------------

//Added the prefix header file to PROJECT:
//1.Creat a new PCH files and named it with "PrefixHeader.pch"(default name or anything you want) .
//2.Click next and go to Build Settings search Prefix Header.
//3.Double click the blank address and put this address: $(SRCROOT)/$(PROJECT_NAME)/PrefixHeader.pch
//THEN YOU CAN USE THIS IN EVERY FILES IN THIS PROJECT. Good luck.

//如何安装:
//1.创建新pch文件,默认名字即可: "PrefixHeader.pch".
//2.点击下一步再去Build Settings 搜索Prefix Header.
//3.找到Prefix Header并且双击,输入$(SRCROOT)/$(PROJECT_NAME)/PrefixHeader.pch
//现在你可以在项目内任何文件调用宏定义了,祝一切顺利.





// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.

//#endif /* PrefixHeader_pch */

//----------------------ABOUT SCREEN & SIZE 屏幕&尺寸 ----------------------------
/**
 iPad Air {{0, 0}, {768, 1024}}
 iphone4s {{0, 0}, {320, 480}}     960*640
 iphone5 5s {{0, 0}, {320, 568}}      1136*640
 iphone6 6s {{0, 0}, {375, 667}}     1334*750
 iphone6Plus 6sPlus {{0, 0}, {414, 736}}  1920*1080
 Apple Watch 1.65inches(英寸) 320*640
 */

#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)
#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)
#define kTabBarH        49.0f
#define kStatusBarH     20.0f
#define kNavigationBarH 44.0f
#define SCREEN_POINT (float)SCREEN_WIDTH/320.f
#define SCREEN_H_POINT (float)SCREEN_HEIGHT/480.f

//判断是否 Retina屏、设备是否iPhone 5、是否是iPad
#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)

/** 判断是否为iPhone */
#define isiPhone (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)

/** 判断是否是iPad */
#define isiPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)

/** 判断是否为iPod */
#define isiPod ([[[UIDevice currentDevice] model] isEqualToString:@"iPod touch"])

/** 设备是否为iPhone 4/4S 分辨率320x480，像素640x960，@2x */
#define iPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)

/** 设备是否为iPhone 5C/5/5S 分辨率320x568，像素640x1136，@2x */
#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)

/** 设备是否为iPhone 6 分辨率375x667，像素750x1334，@2x */
#define iPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)

/** 设备是否为iPhone 6 Plus 分辨率414x736，像素1242x2208，@3x */
#define iPhone6P ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2208), [[UIScreen mainScreen] currentMode].size) : NO)




//----------------------ABOUT SYSTYM & VERSION 系统与版本 ----------------------------
//Get the OS version.       判断操作系统版本
#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]
#define CurrentSystemVersion ([[UIDevice currentDevice] systemVersion])
#define CurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])

//judge the simulator or hardware device        判断是真机还是模拟器
#if TARGET_OS_IPHONE
//iPhone Device
#endif

#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif


/** 获取系统版本 */
#define iOS_VERSION ([[[UIDevice currentDevice] systemVersion] floatValue])
#define CurrentSystemVersion ([[UIDevice currentDevice] systemVersion])

/** 是否为iOS6 */
#define iOS6 (([[[UIDevice currentDevice] systemVersion] floatValue] >= 6.0) ? YES : NO)

/** 是否为iOS7 */
#define iOS7 (([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0) ? YES : NO)

/** 是否为iOS8 */
#define iOS8 (([[[UIDevice currentDevice] systemVersion] floatValue] >= 8.0) ? YES : NO)

/** 是否为iOS9 */
#define iOS9 (([[[UIDevice currentDevice] systemVersion] floatValue] >= 9.0) ? YES : NO)

/** 获取当前语言 */
#define kCurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])


//----------------------ABOUT PRINTING LOG 打印日志 ----------------------------
//Using dlog to print while in debug model.        调试状态下打印日志
#ifdef DEBUG
#   define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#else
#   define DLog(...)
#endif

//Printing while in the debug model and pop an alert.       模式下打印日志,当前行 并弹出一个警告
#ifdef DEBUG
#   define ULog(fmt, ...)  { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%s\n [Line %d] ", __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:fmt, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil]; [alert show]; }
#else
#   define ULog(...)
#endif


/** print 打印rect,size,point */
#ifdef DEBUG
#define kLogPoint(point)    NSLog(@"%s = { x:%.4f, y:%.4f }", #point, point.x, point.y)
#define kLogSize(size)      NSLog(@"%s = { w:%.4f, h:%.4f }", #size, size.width, size.height)
#define kLogRect(rect)      NSLog(@"%s = { x:%.4f, y:%.4f, w:%.4f, h:%.4f }", #rect, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height)
#endif



//----------------------ABOUT COLOR 颜色相关 ----------------------------

#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]
#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]
// rgb颜色转换（16进制->10进制）
#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

//带有RGBA的颜色设置
#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]

#define kClearColor [UIColor clearColor]


#define COLOR_BLUE_             UIColorFromRGB(0x41CEF2)
#define COLOR_GRAY_             UIColorFromRGB(0xababab) //171
#define COLOR_333               UIColorFromRGB(0x333333) //51
#define COLOR_666               UIColorFromRGB(0x666666) //102
#define COLOR_888               UIColorFromRGB(0x888888) //136
#define COLOR_999               UIColorFromRGB(0x999999) //153
#define COLOR_PLACEHOLD_        UIColorFromRGB(0xc5c5c5) //197
#define COLOR_RED_              UIColorFromRGB(0xff5400) //红色
#define COLOR_GREEN_            UIColorFromRGB(0x31d8ab)//绿色
#define COLOR_YELLOW_           UIColorFromRGB(0xffa200)//黄色
#define COLOR_SEPARATE_LINE     UIColorFromRGB(0xC8C8C8)//200
#define COLOR_LIGHTGRAY         COLOR(200, 200, 200, 0.4)//淡灰色

#define MAX_WIDTH_10        (SCREEN_WIDTH-20)
#define MAX_WIDTH_15        (SCREEN_WIDTH-30)


//----------------------ABOUT IMAGE 图片 ----------------------------

//LOAD LOCAL IMAGE FILE     读取本地图片
#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]


//DEFINE IMAGE      定义UIImage对象//    imgView.image = IMAGE(@"Default.png");

#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]

//DEFINE IMAGE      定义UIImage对象
#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer]]

//BETTER USER THE FIRST TWO WAY, IT PERFORM WELL. 优先使用前两种宏定义,性能高于后面.




//----------------------SOMETHING ELSE 其他 ----------------------------

#define intToStr(S)    [NSString stringWithFormat:@"%d",S]

//
//#define NotificationWarning(msg) [JDStatusBarNotification showWithStatus:msg dismissAfter:2.0 styleName:JDStatusBarStyleWarning]
//
//#define NotificationError(msg) [JDStatusBarNotification showWithStatus:msg dismissAfter:2.0 styleName:JDStatusBarStyleError]
//
//#define NotificationSuccess(msg) [JDStatusBarNotification showWithStatus:msg dismissAfter:2.0 styleName:JDStatusBarStyleSuccess]


/**
 *  the saving objects      存储对象
 *
 *  @param __VALUE__ V
 *  @param __KEY__   K
 *
 *  @return
 */
#define UserDefaultSetObjectForKey(__VALUE__,__KEY__) \
{\
[[NSUserDefaults standardUserDefaults] setObject:__VALUE__ forKey:__KEY__];\
[[NSUserDefaults standardUserDefaults] synchronize];\
}

/**
 *  get the saved objects       获得存储的对象
 */
#define UserDefaultObjectForKey(__KEY__)  [[NSUserDefaults standardUserDefaults] objectForKey:__KEY__]

/**
 *  delete objects      删除对象
 */
#define UserDefaultRemoveObjectForKey(__KEY__) \
{\
[[NSUserDefaults standardUserDefaults] removeObjectForKey:__KEY__];\
[[NSUserDefaults standardUserDefaults] synchronize];\
}

#define PLIST_TICKET_INFO_EDIT [NSHomeDirectory() stringByAppendingString:@"/Documents/data.plist"] //edit the plist

#define TableViewCellDequeueInit(__INDETIFIER__) [tableView dequeueReusableCellWithIdentifier:(__INDETIFIER__)];

#define TableViewCellDequeue(__CELL__,__CELLCLASS__,__INDETIFIER__) \
{\
if (__CELL__ == nil) {\
__CELL__ = [[__CELLCLASS__ alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:__INDETIFIER__];\
}\
}

#define KEYWINDOW [UIApplication sharedApplication].keyWindow

//Show Alert, brackets is the parameters.       宏定义一个弹窗方法,括号里面是方法的参数
#define ShowAlert    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Warning." message:nil delegate:self cancelButtonTitle:@"cancel" otherButtonTitles: @"OK"];[alert show];

#endif


//define an API 定义一个API
#define APIURL                @"http://www.google.com"
//login the API 登陆API
#define APILogin              [APIURL stringByAppendingString:@"Login"]

//GCD
#define GCDWithGlobal(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define GCDWithMain(block) dispatch_async(dispatch_get_main_queue(),block)

//NSUserDefaults 实例化
#define USER_DEFAULT [NSUserDefaults standardUserDefaults]

//单例化 一个类
#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \
\
static classname *shared##classname = nil; \
\
+ (classname *)shared##classname \
{ \
@synchronized(self) \
{ \
if (shared##classname == nil) \
{ \
shared##classname = [[self alloc] init]; \
} \
} \
\
return shared##classname; \
} \
\
+ (id)allocWithZone:(NSZone *)zone \
{ \
@synchronized(self) \
{ \
if (shared##classname == nil) \
{ \
shared##classname = [super allocWithZone:zone]; \
return shared##classname; \
} \
} \
\
return nil; \
} \
\
- (id)copyWithZone:(NSZone *)zone \
{ \
return self; \
}

/** 快速查询一段代码的执行时间 */
/** 用法
 TICK
 do your work here
 TOCK
 */

#define TICK NSDate *startTime = [NSDate date];
#define TOCK NSLog(@"Time:%f", -[startTime timeIntervalSinceNow]);


/*======================================================
 *********************** 系统 **************************
 ======================================================*/
//IOS系统名称 e.g. @"iPhone OS"
#define SystemName [[UIDevice currentDevice] systemName]
//IOS系统版本号 e.g. 7.0.3
#define SystemVersion [[[UIDevice currentDevice] systemVersion] doubleValue]
//获取当前语言
#define SystemLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])
//UUID--MacUUID(App重装后UUID会改变)
#define MacUUID [[[UIDevice currentDevice] identifierForVendor] UUIDString]
//本机类型--e.g. @"iPhone", @"iPod, @"iPhone Simulator"
#define SystemModel [[UIDevice currentDevice] model]

//App名称
#define AppName [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleDisplayName"]
//App版本号 e.g. 1.1.0
#define AppVersion [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"]
//App build版本号 e.g. 1.1.0
#define AppBuildVersion [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleVersion"]
//App BundleIdentifier e.g. com.baidu.test
#define AppBundleIdentifier [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleIdentifier"]

//屏幕尺寸的宽高与scale的乘积就是相应的分辨率值。
#define SystemScale [UIScreen mainScreen].scale

//判断是否是iphone4屏-640像素 x 960像素
#define isiPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)
//判断是否是iphone5 or iphone5s or iphone SE
#define isiPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)
//判断是否是iphone6 or iphone6s
#define isiPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)
//判断是否是iphone6 plus or iphone6s plus
#define isiPhone6plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2208), [[UIScreen mainScreen] currentMode].size) : NO)

//判断是否是iphone
#define isIPhone ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone ? YES: NO)
#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
//判断iphone的版本号
#define isSystemIsWhich(yoursystem) [[[UIDevice currentDevice] systemVersion] compare:yoursystmen] == NSOrderedDescending

//判断是真机还是模拟器
#if TARGET_OS_IPHONE
//iPhone Device
#endif
#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif

/*======================================================
 *********************** 内存 **************************
 ======================================================*/
//使用ARC和不使用ARC
#if __has_feature(objc_arc)
//compiling with ARC
#else
// compiling without ARC
#endif

//字符串安全处理
#define SAFE_STRING(str) ([(str) length] ? (str) : @"")
//把数字变成字符串
#define SAFE_StringFormInt(intNum) [NSString stringWithFormat:@"%ld",(long)(intNum)]
//对象安全处理
#define SAFE_OBJECT(object) ([[NSNull null] isEqual:object] ? nil : object)
//安全的移除一个对象
#define SAFE_RemoveView(view) if(view){\
if ([view superview]) {[view removeFromSuperview];}\
view = nil;\
}
//清空视图
#define SAFE_emptyView(view) for(UIView *subview in [view subviews]){[subview removeFromSuperview];}
//释放一个对象
#define safe_release(obj) if(obj != nil && obj !=NULL){ \
[obj release]; \
obj = nil;\
}

/**
 *  强弱引用转换
 */
#define WeekSelf(weakSelf)  __weak __typeof(&*self)weakSelf = self;
#define StrongSelf(strongSelf) __strong __typeof(&*self)strongSelf = weakSelf;

/**
 * 强弱引用转换，用于解决代码块（block）与强引用self之间的循环引用问题
 * 调用方式: `@weakify_self`实现弱引用转换，`@strongify_self`实现强引用转换
 *
 * 示例：
 * @weakify_self
 * [obj block:^{
 * @strongify_self
 * self.property = something;
 * }];
 */
#ifndef weakify_self
#if __has_feature(objc_arc)
#define weakify_self autoreleasepool{} __weak __typeof__(self) weakSelf = self;
#else
#define weakify_self autoreleasepool{} __block __typeof__(self) blockSelf = self;
#endif
#endif

#ifndef strongify_self
#if __has_feature(objc_arc)
#define strongify_self try{} @finally{} __typeof__(weakSelf) self = weakSelf;
#else
#define strongify_self try{} @finally{} __typeof__(blockSelf) self = blockSelf;
#endif
#endif

/**
 * 强弱引用转换，用于解决代码块（block）与强引用对象之间的循环引用问题
 * 调用方式: `@weakify(object)`实现弱引用转换，`@strongify(object)`实现强引用转换
 *
 * 示例：
 * @weakify(object)
 * [obj block:^{
 * @strongify(object)
 * strong_object = something;
 * }];
 */
#ifndef weakify
#if __has_feature(objc_arc)
#define weakify(object) autoreleasepool{} __weak __typeof__(object) weak##_##object = object;
#else
#define weakify(object) autoreleasepool{} __block __typeof__(object) block##_##object = object;
#endif
#endif

#ifndef strongify
#if __has_feature(objc_arc)
#define strongify(object) try{} @finally{} __typeof__(object) strong##_##object = weak##_##object;
#else
#define strongify(object) try{} @finally{} __typeof__(object) strong##_##object = block##_##object;
#endif
#endif

/*======================================================
 *********************** 图片 **************************
 ======================================================*/
//获取图片文件
#define GET_IMAGE(__NAME__,__TYPE__)    [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:__NAME__ ofType:__TYPE__]]

/*======================================================
 ********************** 字体类 **************************
 ======================================================*/

/**
 * 导航栏 标题字体
 */
#define Font_NavBarTitel [UIFont boldSystemFontOfSize:16]

/**
 * 导航栏 按钮字体
 */
#define Font_NavBarButton [UIFont systemFontOfSize:16]

/**
 * 按钮字体
 */
#define Font_Button(fontsize) [UIFont systemFontOfSize:(fontsize)]

/**
 * 按钮字体
 */
#define Font_Text(fontsize) [UIFont systemFontOfSize:(fontsize)]
#define Font_Text_bold(fontsize) [UIFont boldSystemFontOfSize:(fontsize)]

/*======================================================
 ********************** 颜色类 **************************
 ======================================================*/

/**
 * 转换计算着色的值(16进制->10进制) e.g. ColorFromRGB(0x067AB5)
 */
#define Color_RGB_OxH(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

/**
 * 转换计算着色的值 e.g. Color_RGB(120,110,0),相应的参数会除255.0
 */
#define Color_RGBA(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]
#define Color_RGB(r,g,b) RGBA(r,g,b,1.0f)


/*======================================================
 ********************** APP颜色类 **************************
 ======================================================*/
/**
 * 导航栏 默认背景颜色
 */
#define Color_NavBar_BACKGROUND  [UIColor colorWithRed:0.11 green:0.68 blue:0.75 alpha:1]

/**
 * 导航栏 标题颜色
 */
#define Color_NavBarTitel  [UIColor colorWithRed:1 green:1 blue:1 alpha:1.0]

/**
 * 文字 默认文本颜色
 */
#define Color_Text  [UIColor colorWithRed:0 green:0 blue:0 alpha:1.0]


/**
 * 文字--深色 默认背景颜色
 */
#define Color_Text_dark  [UIColor colorWithRed:0.4235 green:0.4078 blue:0.4078 alpha:1.0]

/**
 * 边框颜色
 */
#define Color_border  [UIColor colorWithRed:0.92 green:0.92 blue:0.92 alpha:1]
#define Color_border_heightLinght [UIColor colorWithRed:0.6 green:0.85 blue:0.62 alpha:1]

/**
 * 文字--深色 默认背景颜色16位
 */
#define Color_Text_dark_16H @"#6C6868"

/**
 * 视图背景 默认背景颜色
 */
#define Color_mainviewBackground [UIColor colorWithRed:0.94 green:0.94 blue:0.96 alpha:1]
#define Color_viewBackground [UIColor colorWithRed:0.96 green:0.96 blue:0.96 alpha:1]
/**
 * 按钮 默认背景颜色
 */
#define Color_buttonONBackground  [UIColor colorWithRed:0.8235 green:0.8235 blue:0.8235 alpha:1.0]
#define Color_buttonOFFBackground  [UIColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1.0]

/**
 * 按钮 默认背景颜色
 */
#define Color_buttonTitel  [UIColor colorWithRed:1 green:1 blue:1 alpha:1.0]

/**
 * 右移视图背景 默认背景颜色
 */
#define Color_moveRightViewBackground  [UIColor colorWithRed:0.0000 green:0.4745 blue:0.5255 alpha:1.0]


/*======================================================
 ************* 定义各种frame及坐标和尺寸 ******************
 ======================================================*/
//工具栏高度
#define TabBarHeight 49

//导航栏、状态栏调度
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_7_0
// iPhone OS SDK 7.0 以后版本的处理
#define NavBarHeight 64.0f
#define STATUS_H 0.0f
#else
// iPhone OS SDK 7.0 之前版本的处理
#define NavBarHeight 44.0f
#define STATUS_H [[UIApplication sharedApplication] statusBarFrame].size.height
#endif
#endif

//状态栏
#define STATUS_FRAME [[UIApplication sharedApplication] statusBarFrame]//状态栏FRAME

//RootViewController
#define RootViewController [UIApplication sharedApplication].keyWindow.rootViewController
#define RootWindow [UIApplication sharedApplication].keyWindow

/**
 * 当前APP占设备的屏幕FRAME--不含状态栏高度
 */
#define APPFrame [[UIScreen mainScreen] applicationFrame]

/**
 * 当前设备的屏幕FRAME--含状态栏高度
 */
#define MainFrame [[UIScreen mainScreen] bounds]

/**
 * 当前设备的屏幕X
 */
#define SCREEN_X   [[UIScreen mainScreen] bounds].origin.x

/**
 * 当前设备的屏幕Y
 */
#define SCREEN_Y   [[UIScreen mainScreen] bounds].origin.y

/**
 * 当前设备的屏幕宽度
 */
#define SCREEN_WIDTH   [[UIScreen mainScreen] bounds].size.width

/**
 * 当前设备的屏幕高度(含状态栏高度)
 */
#define SCREEN_HEIGHT   [[UIScreen mainScreen] bounds].size.height

/*======================================================
 ********************* 打印日志 *************************
 ======================================================*/
//Debug模式下打印日志和当前行数
//可以用printf来替代NSLog，这样输出的信息中就不会带有时间等信息。
#ifdef DEBUG
#   define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#else
#   define DLog(...)
#endif

//此处屏蔽，是把此宏放在了-Prefix.pch
////重写NSLog,Debug模式下打印日志和当前行数
////可以用printf来替代NSLog，这样输出的信息中就不会带有时间等信息。
//#if DEBUG
//#define NSLog(FORMAT, ...) fprintf(stderr,"\nfunction:%s line:%d content:%s\n", __FUNCTION__, __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);
//#else
//#define NSLog(FORMAT, ...) nil
//#endif

//DEBUG  模式下打印日志,当前行 并弹出一个警告
#ifdef DEBUG
#   define SFLog(fmt, ...)  { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%s\n [Line %d] ", __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:fmt, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil]; [alert show]; }
#else
#   define SFLog(...)
#endif

/**
 * 1) __VA_ARGS__ 是一个可变参数的宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支持（VC6.0的编译器不支持）。宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的","去掉的作用,否则会编译出错。
 * 2) __FILE__ 宏在预编译时会替换成当前的源文件名
 * 3) __LINE__宏在预编译时会替换成当前的行号
 * 4) __FUNCTION__宏在预编译时会替换成当前的函数名称
 * 5) __PRETTY_FUNCTION__对函数的打印会带上参数
 * 6) __DATE__编译时的日期
 * 7) __TIME__编译时的时间
 *
 * DEPRECATED_MSG_ATTRIBUTE("use XXXClass instead.") //整个类已过期，使用XXXClass取代
 * API_AVAILABLE(ios(6.0)) // 方法在版本6.0后有效
 * __attribute__((deprecated(explain)))  //explain:String  属性或方法已失效以及说明文案
 *   #if __has_include(<CoreImage/CoreImage.h>)
     XXX//判断是否包含某个文件
     #endif
 *MP_DEPRECATED_BEGIN("Use AVPlayerViewController in AVKit", ios(3.2, 9.0)) // 有效期在3.2-9.0
 */

/*======================================================
 *********************** 其它 ***************************
 ======================================================*/
//float a=0.0，a与0比较竟然不相等,只能通过a<0.000001来判断a是否为0
#define FLOAT_ERROR_MARGIN 0.000001
//由角度获取弧度
#define degreesToRadian(x) (M_PI * (x) / 180.0)
//由弧度获取角度
#define radianToDegrees(radian) (radian*180.0)/(M_PI)

//G－C－D
#define GCD_BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define GCD_MAIN(block) dispatch_async(dispatch_get_main_queue(),block)

#define SFFrame(X,Y,W,H) CGRectMake((X), (Y), (W), (H))

#define IPhone5S ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)

#define IPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)

#define IPhone6p ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2208), [[UIScreen mainScreen] currentMode].size) : NO)

#define ScaleWide (IPhone5 ? 0.8533 : (IPhone6 ? 1.0000 : (IPhone6p ? 1.1040 : 1.0000)))

#define WIDTH(W)   ScaleWide * W

#define ScaleHigh (IPhone5 ? 0.8516 : (IPhone6 ? 1.0000 : (IPhone6p ? 1.1034 : 1.0000)))

#define HEIGHT(H)    ScaleHigh * H

#define HFont(A) (IPhone5 ? 0.8516 : (IPhone6 ? 1.0000 : (IPhone6p ? 1.1034 : 1.0000))) * (A)

